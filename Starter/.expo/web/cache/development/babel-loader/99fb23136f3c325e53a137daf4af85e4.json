{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport \"./App.css\";\nimport Navbar from \"./Navbar\";\nimport Web3 from 'web3';\nimport Tether from \"../truffle_abis/Tether.json\";\nimport RWD from \"../truffle_abis/RWD.json\";\nimport DecentralBank from \"../truffle_abis/DecentralBank.json\";\nimport Main from \"./Main.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar App = function (_Component) {\n  _inherits(App, _Component);\n\n  var _super = _createSuper(App);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _super.call(this, props);\n\n    _this.stakeTokens = function (amount) {\n      _this.setState({\n        loading: true\n      });\n\n      _this.state.tether.methods.approve(_this.state.decentralBank._address, amount).send({\n        from: _this.state.account\n      }).on('transactionHash', function (hash) {\n        _this.state.decentralBank.methods.depositTokens(amount).send({\n          from: _this.state.account\n        }).on('transactionHash', function (hash) {\n          _this.setState({\n            loading: false\n          });\n        });\n      });\n    };\n\n    _this.unstakeTokens = function () {\n      _this.setState({\n        loading: true\n      });\n\n      _this.state.decentralBank.methods.unstakeTokens().send({\n        from: _this.state.account\n      }).on('transactionHash', function (hash) {\n        _this.setState({\n          loading: false\n        });\n      });\n    };\n\n    _this.state = {\n      account: '0x0',\n      tether: {},\n      rwd: {},\n      decentralBank: {},\n      tetherBalance: '0',\n      rwdBalance: '0',\n      stakingBalance: '0',\n      loading: true\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"UNSAFE_componentWillMount\",\n    value: function UNSAFE_componentWillMount() {\n      return _regeneratorRuntime.async(function UNSAFE_componentWillMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(this.loadWeb3());\n\n            case 2:\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(this.loadBlockChainData());\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"loadWeb3\",\n    value: function loadWeb3() {\n      return _regeneratorRuntime.async(function loadWeb3$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!window.ethereum) {\n                _context2.next = 6;\n                break;\n              }\n\n              window.web3 = new Web3(window.ethereum);\n              _context2.next = 4;\n              return _regeneratorRuntime.awrap(window.ethereum.enable());\n\n            case 4:\n              _context2.next = 7;\n              break;\n\n            case 6:\n              if (window.web3) {\n                window.web3 = new Web3(window.web3.currentprovider);\n              } else {\n                window.alert('No Ethereum Browser Detected! You can Check Out MetaMask!');\n              }\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"loadBlockChainData\",\n    value: function loadBlockChainData() {\n      var web3, account, networkId, tetherData, tether, tetherBalance, rwdData, rwd, rwdBalance, decentralBankData, decentralBank, stakingBalance;\n      return _regeneratorRuntime.async(function loadBlockChainData$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              web3 = window.web3;\n              _context3.next = 3;\n              return _regeneratorRuntime.awrap(web3.eth.getAccounts());\n\n            case 3:\n              account = _context3.sent;\n              this.setState({\n                account: account[0]\n              });\n              _context3.next = 7;\n              return _regeneratorRuntime.awrap(web3.eth.net.getId());\n\n            case 7:\n              networkId = _context3.sent;\n              tetherData = Tether.networks[networkId];\n\n              if (!tetherData) {\n                _context3.next = 18;\n                break;\n              }\n\n              tether = new web3.eth.Contract(Tether.abi, tetherData.address);\n              this.setState({\n                tether: tether\n              });\n              _context3.next = 14;\n              return _regeneratorRuntime.awrap(tether.methods.balanceOf(this.state.account).call());\n\n            case 14:\n              tetherBalance = _context3.sent;\n              this.setState({\n                tetherBalance: tetherBalance.toString()\n              });\n              _context3.next = 19;\n              break;\n\n            case 18:\n              window.alert('Error! Tether Network Not Deployed - No Detected Network!');\n\n            case 19:\n              rwdData = RWD.networks[networkId];\n\n              if (!rwdData) {\n                _context3.next = 29;\n                break;\n              }\n\n              rwd = new web3.eth.Contract(RWD.abi, rwdData.address);\n              this.setState({\n                rwd: rwd\n              });\n              _context3.next = 25;\n              return _regeneratorRuntime.awrap(rwd.methods.balanceOf(this.state.account).call());\n\n            case 25:\n              rwdBalance = _context3.sent;\n              this.setState({\n                rwdBalance: rwdBalance.toString()\n              });\n              _context3.next = 30;\n              break;\n\n            case 29:\n              window.alert('Error! RWD  Not Deployed - No Detected Network!');\n\n            case 30:\n              decentralBankData = DecentralBank.networks[networkId];\n\n              if (!decentralBankData) {\n                _context3.next = 40;\n                break;\n              }\n\n              decentralBank = new web3.eth.Contract(DecentralBank.abi, decentralBankData.address);\n              this.setState({\n                decentralBank: decentralBank\n              });\n              _context3.next = 36;\n              return _regeneratorRuntime.awrap(decentralBank.methods.stakingBalance(this.state.account).call());\n\n            case 36:\n              stakingBalance = _context3.sent;\n              this.setState({\n                stakingBalance: stakingBalance.toString()\n              });\n              _context3.next = 41;\n              break;\n\n            case 40:\n              window.alert('Error! Decentral Bank Not Deployed - No Detected Network!');\n\n            case 41:\n              this.setState({\n                loading: false\n              });\n\n            case 42:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var content;\n      {\n        this.state.loading ? content = _jsx(\"p\", {\n          id: \"loader\",\n          className: \"text-center\",\n          style: {\n            margin: '30px'\n          },\n          children: \"LOADING PLEASE...\"\n        }) : content = _jsx(Main, {\n          tetherBalance: this.state.tetherBalance,\n          rwdBalance: this.state.rwdBalance,\n          stakingBalance: this.state.stakingBalance,\n          stakeTokens: this.stakeTokens,\n          unstakeTokens: this.unstakeTokens\n        });\n      }\n      return _jsxs(\"div\", {\n        children: [_jsx(Navbar, {\n          account: this.state.account\n        }), _jsx(\"div\", {\n          className: \"container-fluid mt-5\",\n          children: _jsx(\"div\", {\n            className: \"row content\",\n            children: _jsx(\"main\", {\n              role: \"main\",\n              className: \"col-lg-12 ml-auto mr-auto\",\n              style: {\n                maxWidth: '600px',\n                minHeight: '100vm'\n              },\n              children: _jsx(\"div\", {\n                children: content\n              })\n            })\n          })\n        })]\n      });\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:/Blockchain Project/defi-staking-app-starter/defi-staking-app-starter/App.js"],"names":["React","Component","Navbar","Web3","Tether","RWD","DecentralBank","Main","App","props","stakeTokens","amount","setState","loading","state","tether","methods","approve","decentralBank","_address","send","from","account","on","hash","depositTokens","unstakeTokens","rwd","tetherBalance","rwdBalance","stakingBalance","loadWeb3","loadBlockChainData","window","ethereum","web3","enable","currentprovider","alert","eth","getAccounts","net","getId","networkId","tetherData","networks","Contract","abi","address","balanceOf","call","toString","rwdData","decentralBankData","content","margin","maxWidth","minHeight"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\r\nimport './App.css'\r\nimport Navbar from './Navbar';\r\nimport Web3 from 'web3';\r\nimport Tether from '../truffle_abis/Tether.json'\r\nimport RWD from '../truffle_abis/RWD.json'\r\nimport DecentralBank from '../truffle_abis/DecentralBank.json'\r\nimport Main from './Main.js'\r\n\r\nclass App extends Component {\r\n\r\n    async UNSAFE_componentWillMount()\r\n    {\r\n\r\n\r\n        await this.loadWeb3()\r\n        await this.loadBlockChainData()\r\n    }\r\n\r\n    async loadWeb3()\r\n    {\r\n        if (window.ethereum)\r\n        {\r\n            window.web3 = new Web3(window.ethereum)\r\n            await window.ethereum.enable()\r\n        }\r\n        else if(window.web3)\r\n        {\r\n            window.web3= new Web3(window.web3.currentprovider)\r\n\r\n        }\r\n        else\r\n        {\r\n            window.alert('No Ethereum Browser Detected! You can Check Out MetaMask!')\r\n        }\r\n\r\n    }\r\n\r\n    async loadBlockChainData()\r\n    {\r\n        const web3 = window.web3\r\n        const account = await web3.eth.getAccounts()\r\n        this.setState({account: account[0]})\r\n        const networkId = await web3.eth.net.getId()\r\n\r\n        //Load Tether Contract\r\n        const tetherData = Tether.networks[networkId]\r\n\r\n        if(tetherData)\r\n        {\r\n            const tether = new web3.eth.Contract(Tether.abi, tetherData.address)\r\n            this.setState({tether})\r\n            let tetherBalance = await tether.methods.balanceOf(this.state.account).call()\r\n            this.setState({tetherBalance: tetherBalance.toString()})\r\n            //console.log({balance: tetherBalance})\r\n        }\r\n\r\n        else \r\n        {\r\n            window.alert('Error! Tether Network Not Deployed - No Detected Network!')\r\n        }\r\n\r\n\r\n        //Load RWD Contract\r\n        const rwdData = RWD.networks[networkId]\r\n\r\n        if(rwdData)\r\n        {\r\n            const rwd = new web3.eth.Contract(RWD.abi, rwdData.address)\r\n            this.setState({rwd})\r\n            let rwdBalance = await rwd.methods.balanceOf(this.state.account).call()\r\n            this.setState({rwdBalance: rwdBalance.toString()})\r\n            //console.log({balance: rwdBalance})\r\n        }\r\n\r\n        else \r\n        {\r\n            window.alert('Error! RWD  Not Deployed - No Detected Network!')\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n        //Load DecentralBank Contract\r\n        const decentralBankData = DecentralBank.networks[networkId]\r\n\r\n        if(decentralBankData)\r\n        {\r\n            const decentralBank = new web3.eth.Contract(DecentralBank.abi, decentralBankData.address)\r\n            this.setState({decentralBank})\r\n            let stakingBalance = await decentralBank.methods.stakingBalance(this.state.account).call()\r\n            this.setState({stakingBalance: stakingBalance.toString()})\r\n            //console.log({balance: stakingBalance})\r\n        }\r\n\r\n        else \r\n        {\r\n            window.alert('Error! Decentral Bank Not Deployed - No Detected Network!')\r\n        }\r\n\r\n\r\n\r\n\r\n        this.setState({loading: false})\r\n\r\n\r\n    }\r\n\r\n    //Staking Function\r\n    // leverage our decentralBank conntract deposit tokens and unstaking\r\n    // ALL of This is for the staking:\r\n    // depositTokens transferFrom ....\r\n    // function approve transaction hash\r\n    // STAKING FUNCTION ?? >> decentralBank.depositTokens (send transactionHash =>)\r\n\r\n    // staking functin function():\r\n\r\n    stakeTokens = (amount) => {\r\n\r\n        this.setState({loading: true})\r\n        this.state.tether.methods.approve(this.state.decentralBank._address, amount).send({from: this.state.account}).on('transactionHash', (hash) =>{\r\n        this.state.decentralBank.methods.depositTokens(amount).send({from: this.state.account}).on('transactionHash', (hash) =>{\r\n            this.setState({loading: false})\r\n\r\n        })\r\n    })  \r\n\r\n    }\r\n\r\n\r\n\r\n\r\n        // Unstaking functin function():\r\n\r\n        unstakeTokens = () => {\r\n\r\n            this.setState({loading: true})\r\n        \r\n            this.state.decentralBank.methods.unstakeTokens().send({from: this.state.account}).on('transactionHash', (hash) =>{\r\n                this.setState({loading: false})\r\n    \r\n            })\r\n          \r\n    \r\n        }\r\n\r\n\r\n\r\n\r\n\r\n    constructor(props)\r\n    {\r\n\r\n\r\n\r\n        super(props)\r\n        this.state =\r\n        {\r\n            account: '0x0',\r\n            tether: {},\r\n            rwd: {},\r\n            decentralBank: {},\r\n            tetherBalance: '0',\r\n            rwdBalance: '0',\r\n            stakingBalance: '0',\r\n            loading: true\r\n        }\r\n\r\n    }\r\n\r\n    // React Code Here\r\n    render()\r\n    {\r\n\r\n        let content\r\n        {this.state.loading ? content = <p id='loader' className='text-center' \r\n        style={{margin:'30px'}}>LOADING PLEASE...</p> : content = <Main\r\n         tetherBalance={this.state.tetherBalance}\r\n         rwdBalance={this.state.rwdBalance}\r\n         stakingBalance={this.state.stakingBalance}\r\n         stakeTokens={this.stakeTokens}\r\n         unstakeTokens={this.unstakeTokens}\r\n\r\n         />} \r\n\r\n\r\n            return (\r\n                <div>\r\n                        <Navbar account={this.state.account}></Navbar>\r\n                        <div className='container-fluid mt-5'> \r\n                            <div className='row content'>\r\n                            <main role='main' className='col-lg-12 ml-auto mr-auto' style={{maxWidth:'600px',minHeight:'100vm'}}>\r\n                                <div>\r\n                                    {content}\r\n                                </div>\r\n                            </main>\r\n\r\n                            </div>\r\n                    \r\n                    \r\n\r\n                            </div> \r\n                </div> \r\n\r\n\r\n            )\r\n\r\n\r\n        \r\n    }\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}